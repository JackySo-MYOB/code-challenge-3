{
    "version": 3,
    "terraform_version": "0.11.13",
    "serial": 1,
    "lineage": "60ae3758-3c8f-a4f7-a022-590c0349b1c6",
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {
                "kubernetes_master": {
                    "sensitive": false,
                    "type": "string",
                    "value": "13.210.243.63"
                },
                "kubernetes_workers_public_ip": {
                    "sensitive": false,
                    "type": "string",
                    "value": "13.236.85.185"
                }
            },
            "resources": {
                "aws_iam_instance_profile.kubernetes": {
                    "type": "aws_iam_instance_profile",
                    "depends_on": [
                        "aws_iam_role.kubernetes"
                    ],
                    "primary": {
                        "id": "kubernetes",
                        "attributes": {
                            "arn": "arn:aws:iam::037675027950:instance-profile/kubernetes",
                            "create_date": "2020-12-01T12:23:49Z",
                            "id": "kubernetes",
                            "name": "kubernetes",
                            "path": "/",
                            "role": "kubernetes",
                            "roles.#": "0",
                            "unique_id": "AIPAQRRM3JXXHTFQIOG4A"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role.kubernetes": {
                    "type": "aws_iam_role",
                    "depends_on": [],
                    "primary": {
                        "id": "kubernetes",
                        "attributes": {
                            "arn": "arn:aws:iam::037675027950:role/kubernetes",
                            "assume_role_policy": "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}",
                            "create_date": "2020-12-01T12:23:47Z",
                            "description": "",
                            "force_detach_policies": "false",
                            "id": "kubernetes",
                            "max_session_duration": "3600",
                            "name": "kubernetes",
                            "path": "/",
                            "tags.%": "0",
                            "unique_id": "AROAQRRM3JXXPOPNVIUVN"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_iam_role_policy.kubernetes": {
                    "type": "aws_iam_role_policy",
                    "depends_on": [
                        "aws_iam_role.kubernetes"
                    ],
                    "primary": {
                        "id": "kubernetes:kubernetes",
                        "attributes": {
                            "id": "kubernetes:kubernetes",
                            "name": "kubernetes",
                            "policy": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\" : [\"ec2:*\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\" : [\"elasticloadbalancing:*\"],\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\": \"route53:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\": \"ssm:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\": \"ssmmessages:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\": \"ec2messages:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": [\"*\"]\n    },\n    {\n      \"Action\": \"ecr:*\",\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\n",
                            "role": "kubernetes"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.controller_etcd": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.kubernetes",
                        "aws_security_group.kubernetes",
                        "aws_subnet.kubernetes",
                        "data.template_file.master-userdata",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "i-026c9f1572bb978da",
                        "attributes": {
                            "ami": "ami-0ec645db622b4411a",
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:instance/i-026c9f1572bb978da",
                            "associate_public_ip_address": "true",
                            "availability_zone": "ap-southeast-2a",
                            "cpu_core_count": "2",
                            "cpu_threads_per_core": "1",
                            "credit_specification.#": "1",
                            "credit_specification.0.cpu_credits": "standard",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "get_password_data": "false",
                            "hibernation": "false",
                            "iam_instance_profile": "kubernetes",
                            "id": "i-026c9f1572bb978da",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "ipv6_address_count": "0",
                            "ipv6_addresses.#": "0",
                            "key_name": "tf-kube",
                            "metadata_options.#": "1",
                            "metadata_options.0.http_endpoint": "enabled",
                            "metadata_options.0.http_put_response_hop_limit": "1",
                            "metadata_options.0.http_tokens": "optional",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "outpost_arn": "",
                            "password_data": "",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-004424ab03b5b5724",
                            "private_dns": "ip-10-43-0-40.ap-southeast-2.compute.internal",
                            "private_ip": "10.43.0.40",
                            "public_dns": "ec2-13-210-243-63.ap-southeast-2.compute.amazonaws.com",
                            "public_ip": "13.210.243.63",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.device_name": "/dev/sda1",
                            "root_block_device.0.encrypted": "false",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.kms_key_id": "",
                            "root_block_device.0.volume_id": "vol-088c5326e806042c4",
                            "root_block_device.0.volume_size": "8",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "false",
                            "subnet_id": "subnet-0da6f1d0ec1456f86",
                            "tags.%": "3",
                            "tags.Name": "controller-etcd-0",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "tenancy": "default",
                            "user_data": "c23f2d71e43302a9f245fbe91bcc0d96a3842427",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.318654959": "sg-015624bc7c6361d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_instance.worker": {
                    "type": "aws_instance",
                    "depends_on": [
                        "aws_iam_instance_profile.kubernetes",
                        "aws_security_group.kubernetes",
                        "aws_subnet.kubernetes",
                        "data.template_file.worker-userdata",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "i-03716cc7e12244597",
                        "attributes": {
                            "ami": "ami-0ec645db622b4411a",
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:instance/i-03716cc7e12244597",
                            "associate_public_ip_address": "true",
                            "availability_zone": "ap-southeast-2a",
                            "cpu_core_count": "2",
                            "cpu_threads_per_core": "1",
                            "credit_specification.#": "1",
                            "credit_specification.0.cpu_credits": "standard",
                            "disable_api_termination": "false",
                            "ebs_block_device.#": "0",
                            "ebs_optimized": "false",
                            "ephemeral_block_device.#": "0",
                            "get_password_data": "false",
                            "hibernation": "false",
                            "iam_instance_profile": "kubernetes",
                            "id": "i-03716cc7e12244597",
                            "instance_state": "running",
                            "instance_type": "t2.medium",
                            "ipv6_address_count": "0",
                            "ipv6_addresses.#": "0",
                            "key_name": "tf-kube",
                            "metadata_options.#": "1",
                            "metadata_options.0.http_endpoint": "enabled",
                            "metadata_options.0.http_put_response_hop_limit": "1",
                            "metadata_options.0.http_tokens": "optional",
                            "monitoring": "false",
                            "network_interface.#": "0",
                            "outpost_arn": "",
                            "password_data": "",
                            "placement_group": "",
                            "primary_network_interface_id": "eni-018b97a457c3ee4d8",
                            "private_dns": "ip-10-43-0-30.ap-southeast-2.compute.internal",
                            "private_ip": "10.43.0.30",
                            "public_dns": "ec2-13-236-85-185.ap-southeast-2.compute.amazonaws.com",
                            "public_ip": "13.236.85.185",
                            "root_block_device.#": "1",
                            "root_block_device.0.delete_on_termination": "true",
                            "root_block_device.0.device_name": "/dev/sda1",
                            "root_block_device.0.encrypted": "false",
                            "root_block_device.0.iops": "100",
                            "root_block_device.0.kms_key_id": "",
                            "root_block_device.0.volume_id": "vol-01d9ca21a720720c1",
                            "root_block_device.0.volume_size": "8",
                            "root_block_device.0.volume_type": "gp2",
                            "security_groups.#": "0",
                            "source_dest_check": "false",
                            "subnet_id": "subnet-0da6f1d0ec1456f86",
                            "tags.%": "3",
                            "tags.Name": "worker-0",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "tenancy": "default",
                            "user_data": "5d5f30678259e17cce15118590e789d8ef55b490",
                            "volume_tags.%": "0",
                            "vpc_security_group_ids.#": "1",
                            "vpc_security_group_ids.318654959": "sg-015624bc7c6361d12"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000,
                                "update": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_internet_gateway.gw": {
                    "type": "aws_internet_gateway",
                    "depends_on": [
                        "aws_vpc.kubernetes",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "igw-035de90bbe3e8fd04",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:internet-gateway/igw-035de90bbe3e8fd04",
                            "id": "igw-035de90bbe3e8fd04",
                            "owner_id": "037675027950",
                            "tags.%": "3",
                            "tags.Name": "kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "vpc_id": "vpc-0f8bb34f327bde4d2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_key_pair.default_keypair": {
                    "type": "aws_key_pair",
                    "depends_on": [
                        "local.default_keypair_public_key"
                    ],
                    "primary": {
                        "id": "tf-kube",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:key-pair/tf-kube",
                            "fingerprint": "1e:46:2a:d4:5b:d3:d1:9d:32:da:63:fd:d4:fd:73:23",
                            "id": "tf-kube",
                            "key_name": "tf-kube",
                            "key_pair_id": "key-0ff02fb58cff1f8fc",
                            "public_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCnqahQpnHuvkNl9HKXYku5RQ+ac/Yvu9TaU0Q4Pex39r1c28f7pmbu6qV9lhxCGYbybDXZB59j1VZdiEZZb0qA1JV7KSsF8WBK9s5dw6As4LGLTm6+wDHSAaNA5biyavxAMDjdTU8imGDANP/5PLEumDNk5Cc4O/fojzksXmZDOj8WsrMVxr98VTdeklAECfPgoBDG5oiscgWzu/gsstW9llQQdtgeXWXaKBSb+QAype/Q+JAGxRATGi+rVmF+VR+mWdIwha/n9us7yI4JahHnTOsj2B/UHG8fLS2hnamiuXVtoPgopyDujkqQu/4jKIobpxyYKZRNx3CZeHhqjrop root@8badf41c5c80",
                            "tags.%": "0"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route_table.kubernetes": {
                    "type": "aws_route_table",
                    "depends_on": [
                        "aws_internet_gateway.gw",
                        "aws_vpc.kubernetes",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "rtb-0b8dbb5c596dce38e",
                        "attributes": {
                            "id": "rtb-0b8dbb5c596dce38e",
                            "owner_id": "037675027950",
                            "propagating_vgws.#": "0",
                            "route.#": "1",
                            "route.779267819.cidr_block": "0.0.0.0/0",
                            "route.779267819.egress_only_gateway_id": "",
                            "route.779267819.gateway_id": "igw-035de90bbe3e8fd04",
                            "route.779267819.instance_id": "",
                            "route.779267819.ipv6_cidr_block": "",
                            "route.779267819.nat_gateway_id": "",
                            "route.779267819.network_interface_id": "",
                            "route.779267819.transit_gateway_id": "",
                            "route.779267819.vpc_peering_connection_id": "",
                            "tags.%": "3",
                            "tags.Name": "kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "vpc_id": "vpc-0f8bb34f327bde4d2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_route_table_association.kubernetes": {
                    "type": "aws_route_table_association",
                    "depends_on": [
                        "aws_route_table.kubernetes",
                        "aws_subnet.kubernetes"
                    ],
                    "primary": {
                        "id": "rtbassoc-013aece5cb623e850",
                        "attributes": {
                            "id": "rtbassoc-013aece5cb623e850",
                            "route_table_id": "rtb-0b8dbb5c596dce38e",
                            "subnet_id": "subnet-0da6f1d0ec1456f86"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_security_group.kubernetes": {
                    "type": "aws_security_group",
                    "depends_on": [
                        "aws_vpc.kubernetes",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "sg-015624bc7c6361d12",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:security-group/sg-015624bc7c6361d12",
                            "description": "Managed by Terraform",
                            "egress.#": "1",
                            "egress.482069346.cidr_blocks.#": "1",
                            "egress.482069346.cidr_blocks.0": "0.0.0.0/0",
                            "egress.482069346.description": "",
                            "egress.482069346.from_port": "0",
                            "egress.482069346.ipv6_cidr_blocks.#": "0",
                            "egress.482069346.prefix_list_ids.#": "0",
                            "egress.482069346.protocol": "-1",
                            "egress.482069346.security_groups.#": "0",
                            "egress.482069346.self": "false",
                            "egress.482069346.to_port": "0",
                            "id": "sg-015624bc7c6361d12",
                            "ingress.#": "3",
                            "ingress.2242829830.cidr_blocks.#": "1",
                            "ingress.2242829830.cidr_blocks.0": "10.43.0.0/16",
                            "ingress.2242829830.description": "",
                            "ingress.2242829830.from_port": "0",
                            "ingress.2242829830.ipv6_cidr_blocks.#": "0",
                            "ingress.2242829830.prefix_list_ids.#": "0",
                            "ingress.2242829830.protocol": "-1",
                            "ingress.2242829830.security_groups.#": "0",
                            "ingress.2242829830.self": "false",
                            "ingress.2242829830.to_port": "0",
                            "ingress.3068409405.cidr_blocks.#": "1",
                            "ingress.3068409405.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.3068409405.description": "",
                            "ingress.3068409405.from_port": "8",
                            "ingress.3068409405.ipv6_cidr_blocks.#": "0",
                            "ingress.3068409405.prefix_list_ids.#": "0",
                            "ingress.3068409405.protocol": "icmp",
                            "ingress.3068409405.security_groups.#": "0",
                            "ingress.3068409405.self": "false",
                            "ingress.3068409405.to_port": "0",
                            "ingress.482069346.cidr_blocks.#": "1",
                            "ingress.482069346.cidr_blocks.0": "0.0.0.0/0",
                            "ingress.482069346.description": "",
                            "ingress.482069346.from_port": "0",
                            "ingress.482069346.ipv6_cidr_blocks.#": "0",
                            "ingress.482069346.prefix_list_ids.#": "0",
                            "ingress.482069346.protocol": "-1",
                            "ingress.482069346.security_groups.#": "0",
                            "ingress.482069346.self": "false",
                            "ingress.482069346.to_port": "0",
                            "name": "kubernetes",
                            "owner_id": "037675027950",
                            "revoke_rules_on_delete": "false",
                            "tags.%": "3",
                            "tags.Name": "kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "vpc_id": "vpc-0f8bb34f327bde4d2"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 600000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_subnet.kubernetes": {
                    "type": "aws_subnet",
                    "depends_on": [
                        "aws_vpc.kubernetes",
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "subnet-0da6f1d0ec1456f86",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:subnet/subnet-0da6f1d0ec1456f86",
                            "assign_ipv6_address_on_creation": "false",
                            "availability_zone": "ap-southeast-2a",
                            "availability_zone_id": "apse2-az1",
                            "cidr_block": "10.43.0.0/16",
                            "id": "subnet-0da6f1d0ec1456f86",
                            "ipv6_cidr_block": "",
                            "ipv6_cidr_block_association_id": "",
                            "map_public_ip_on_launch": "false",
                            "outpost_arn": "",
                            "owner_id": "037675027950",
                            "tags.%": "3",
                            "tags.Name": "kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned",
                            "vpc_id": "vpc-0f8bb34f327bde4d2"
                        },
                        "meta": {
                            "e2bfb730-ecaa-11e6-8f88-34363bc7c4c0": {
                                "create": 600000000000,
                                "delete": 1200000000000
                            },
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_vpc.kubernetes": {
                    "type": "aws_vpc",
                    "depends_on": [
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "vpc-0f8bb34f327bde4d2",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:vpc/vpc-0f8bb34f327bde4d2",
                            "assign_generated_ipv6_cidr_block": "false",
                            "cidr_block": "10.43.0.0/16",
                            "default_network_acl_id": "acl-0395765cd90b6c450",
                            "default_route_table_id": "rtb-026c80fe722fd46d1",
                            "default_security_group_id": "sg-044bee4ee99d7d7a0",
                            "dhcp_options_id": "dopt-0c9323a5d4524a0e1",
                            "enable_classiclink": "false",
                            "enable_classiclink_dns_support": "false",
                            "enable_dns_hostnames": "true",
                            "enable_dns_support": "true",
                            "id": "vpc-0f8bb34f327bde4d2",
                            "instance_tenancy": "default",
                            "ipv6_association_id": "",
                            "ipv6_cidr_block": "",
                            "main_route_table_id": "rtb-026c80fe722fd46d1",
                            "owner_id": "037675027950",
                            "tags.%": "3",
                            "tags.Name": "kubeadm-kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned"
                        },
                        "meta": {
                            "schema_version": "1"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_vpc_dhcp_options.dns_resolver": {
                    "type": "aws_vpc_dhcp_options",
                    "depends_on": [
                        "local.common_tags"
                    ],
                    "primary": {
                        "id": "dopt-060e57070fbd805ce",
                        "attributes": {
                            "arn": "arn:aws:ec2:ap-southeast-2:037675027950:dhcp-options/dopt-060e57070fbd805ce",
                            "domain_name": "ap-southeast-2.compute.internal",
                            "domain_name_servers.#": "1",
                            "domain_name_servers.0": "AmazonProvidedDNS",
                            "id": "dopt-060e57070fbd805ce",
                            "owner_id": "037675027950",
                            "tags.%": "3",
                            "tags.Name": "kubeadm-kubernetes",
                            "tags.Owner": "code-challenge-2",
                            "tags.kubernetes.io/cluster/code-challenge-2": "owned"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "aws_vpc_dhcp_options_association.dns_resolver": {
                    "type": "aws_vpc_dhcp_options_association",
                    "depends_on": [
                        "aws_vpc.kubernetes",
                        "aws_vpc_dhcp_options.dns_resolver"
                    ],
                    "primary": {
                        "id": "dopt-060e57070fbd805ce-vpc-0f8bb34f327bde4d2",
                        "attributes": {
                            "dhcp_options_id": "dopt-060e57070fbd805ce",
                            "id": "dopt-060e57070fbd805ce-vpc-0f8bb34f327bde4d2",
                            "vpc_id": "vpc-0f8bb34f327bde4d2"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.aws"
                },
                "data.template_file.etcd-userdata": {
                    "type": "template_file",
                    "depends_on": [
                        "aws_instance.controller_etcd"
                    ],
                    "primary": {
                        "id": "c97cda32153f5c3178105edd6a720f72ada6155e11099caa2e1ee5e9388ccf1d",
                        "attributes": {
                            "id": "c97cda32153f5c3178105edd6a720f72ada6155e11099caa2e1ee5e9388ccf1d",
                            "rendered": "#!/bin/bash -ve\ntouch /home/ubuntu/etcd.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/etcd.log\n\n# Install etcdctl for the version of etcd we're running\nGOOGLE_URL=https://storage.googleapis.com/etcd\nGITHUB_URL=https://github.com/etcd-io/etcd/releases/download\nDOWNLOAD_URL=${GOOGLE_URL}\n\nETCD_VER=v$(kubeadm config images list | grep etcd | cut -d':' -f2 | cut -d'-' -f1)\ncurl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/local/bin --strip-components=1\nrm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\necho '[Finished] Installing etcdctl' \u003e\u003e /home/ubuntu/etcd.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/etcd.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/etcd.log\n\n# ----------------- from here same with etcd.sh\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\necho '[Wait] kubeadm join until kubeadm cluster have been created.' \u003e\u003e /home/ubuntu/etcd.log\nfor i in {1..50}; do sudo kubeadm join --token=d7dd14.55fbb69d581e8917 --discovery-token-unsafe-skip-ca-verification --node-name=$(hostname -f) 10.43.0.40:6443 \u0026\u0026 break || sleep 15; done\n",
                            "template": "#!/bin/bash -ve\ntouch /home/ubuntu/etcd.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/etcd.log\n\n# Install etcdctl for the version of etcd we're running\nGOOGLE_URL=https://storage.googleapis.com/etcd\nGITHUB_URL=https://github.com/etcd-io/etcd/releases/download\nDOWNLOAD_URL=$${GOOGLE_URL}\n\nETCD_VER=v$(kubeadm config images list | grep etcd | cut -d':' -f2 | cut -d'-' -f1)\ncurl -L $${DOWNLOAD_URL}/$${ETCD_VER}/etcd-$${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz\ntar xzvf /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz -C /usr/local/bin --strip-components=1\nrm -f /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz\necho '[Finished] Installing etcdctl' \u003e\u003e /home/ubuntu/etcd.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/etcd.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/etcd.log\n\n# ----------------- from here same with etcd.sh\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\necho '[Wait] kubeadm join until kubeadm cluster have been created.' \u003e\u003e /home/ubuntu/etcd.log\nfor i in {1..50}; do sudo kubeadm join --token=${k8stoken} --discovery-token-unsafe-skip-ca-verification --node-name=$(hostname -f) ${masterIP}:6443 \u0026\u0026 break || sleep 15; done\n",
                            "vars.%": "2",
                            "vars.k8stoken": "d7dd14.55fbb69d581e8917",
                            "vars.masterIP": "10.43.0.40"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.master-userdata": {
                    "type": "template_file",
                    "depends_on": [],
                    "primary": {
                        "id": "a931bbbf42da9a229dfa6b59d6c67039a0bc75aa060d3459754c22e098ac8f63",
                        "attributes": {
                            "id": "a931bbbf42da9a229dfa6b59d6c67039a0bc75aa060d3459754c22e098ac8f63",
                            "rendered": "#!/bin/bash -ve\ntouch /home/ubuntu/master.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install Helm v2 binary\ncurl -s https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/master.log\n\n# Install etcdctl for the version of etcd we're running\nGOOGLE_URL=https://storage.googleapis.com/etcd\nGITHUB_URL=https://github.com/etcd-io/etcd/releases/download\nDOWNLOAD_URL=${GOOGLE_URL}\n\nETCD_VER=v$(kubeadm config images list | grep etcd | cut -d':' -f2 | cut -d'-' -f1)\ncurl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\ntar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz -C /usr/local/bin --strip-components=1\nrm -f /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\n\necho '[Finished] Installing etcdctl' \u003e\u003e /home/ubuntu/master.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/master.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/master.log\n\n# ----------------- from here same with worker.sh\n\ncat \u003einit-config.yaml \u003c\u003cEOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: \"d7dd14.55fbb69d581e8917\"\n  ttl: \"0\"\nnodeRegistration:\n  name: \"$(hostname -f)\"\n  taints: []\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServerExtraArgs:\n  cloud-provider: aws\ncontrollerManagerExtraArgs:\n  cloud-provider: aws\nnetworking:\n  podSubnet: 10.244.0.0/16\nEOF\n\nkubeadm init --config=/init-config.yaml --ignore-preflight-errors=NumCPU\ntouch /tmp/fresh-cluster\necho '[Finished] created kubeadm cluster' \u003e\u003e /home/ubuntu/master.log\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel like the above cidr setting)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\n# Set up kubectl for the ubuntu user\nmkdir -p /home/ubuntu/.kube \u0026\u0026 cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config \u0026\u0026 chown -R ubuntu. /home/ubuntu/.kube\necho 'source \u003c(kubectl completion bash)' \u003e\u003e /home/ubuntu/.bashrc\necho '[Finished] Now you can use kubectl, try : kubectl get nodes' \u003e\u003e /home/ubuntu/master.log\n\nif [ -f /tmp/fresh-cluster ]; then\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml' ubuntu\n  su -c 'kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml' ubuntu\n  echo '[Finished] All nodes are ready' \u003e\u003e /home/ubuntu/master.log\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml' ubuntu\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/graykode/aws-kubeadm-terraform/master/service-l7.yaml' ubuntu\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/aws/patch-configmap-l4.yaml' ubuntu\nfi\n",
                            "template": "#!/bin/bash -ve\ntouch /home/ubuntu/master.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install Helm v2 binary\ncurl -s https://raw.githubusercontent.com/kubernetes/helm/master/scripts/get | bash\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/master.log\n\n# Install etcdctl for the version of etcd we're running\nGOOGLE_URL=https://storage.googleapis.com/etcd\nGITHUB_URL=https://github.com/etcd-io/etcd/releases/download\nDOWNLOAD_URL=$${GOOGLE_URL}\n\nETCD_VER=v$(kubeadm config images list | grep etcd | cut -d':' -f2 | cut -d'-' -f1)\ncurl -L $${DOWNLOAD_URL}/$${ETCD_VER}/etcd-$${ETCD_VER}-linux-amd64.tar.gz -o /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz\ntar xzvf /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz -C /usr/local/bin --strip-components=1\nrm -f /tmp/etcd-$${ETCD_VER}-linux-amd64.tar.gz\n\necho '[Finished] Installing etcdctl' \u003e\u003e /home/ubuntu/master.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/master.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/master.log\n\n# ----------------- from here same with worker.sh\n\ncat \u003einit-config.yaml \u003c\u003cEOF\napiVersion: kubeadm.k8s.io/v1beta2\nkind: InitConfiguration\nbootstrapTokens:\n- groups:\n  - system:bootstrappers:kubeadm:default-node-token\n  token: \"${k8stoken}\"\n  ttl: \"0\"\nnodeRegistration:\n  name: \"$(hostname -f)\"\n  taints: []\n---\napiVersion: kubeadm.k8s.io/v1beta2\nkind: ClusterConfiguration\napiServerExtraArgs:\n  cloud-provider: aws\ncontrollerManagerExtraArgs:\n  cloud-provider: aws\nnetworking:\n  podSubnet: 10.244.0.0/16\nEOF\n\nkubeadm init --config=/init-config.yaml --ignore-preflight-errors=NumCPU\ntouch /tmp/fresh-cluster\necho '[Finished] created kubeadm cluster' \u003e\u003e /home/ubuntu/master.log\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel like the above cidr setting)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\n# Set up kubectl for the ubuntu user\nmkdir -p /home/ubuntu/.kube \u0026\u0026 cp -i /etc/kubernetes/admin.conf /home/ubuntu/.kube/config \u0026\u0026 chown -R ubuntu. /home/ubuntu/.kube\necho 'source \u003c(kubectl completion bash)' \u003e\u003e /home/ubuntu/.bashrc\necho '[Finished] Now you can use kubectl, try : kubectl get nodes' \u003e\u003e /home/ubuntu/master.log\n\nif [ -f /tmp/fresh-cluster ]; then\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/2140ac876ef134e0ed5af15c65e414cf26827915/Documentation/kube-flannel.yml' ubuntu\n  su -c 'kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml' ubuntu\n  echo '[Finished] All nodes are ready' \u003e\u003e /home/ubuntu/master.log\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/mandatory.yaml' ubuntu\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/graykode/aws-kubeadm-terraform/master/service-l7.yaml' ubuntu\n  # su -c 'kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/static/provider/aws/patch-configmap-l4.yaml' ubuntu\nfi\n",
                            "vars.%": "1",
                            "vars.k8stoken": "d7dd14.55fbb69d581e8917"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                },
                "data.template_file.worker-userdata": {
                    "type": "template_file",
                    "depends_on": [
                        "aws_instance.controller_etcd"
                    ],
                    "primary": {
                        "id": "4351dfcda3b0b76e747acf1f3b44603b5e2b9d9c79cbded7a8515a28ba0b5415",
                        "attributes": {
                            "id": "4351dfcda3b0b76e747acf1f3b44603b5e2b9d9c79cbded7a8515a28ba0b5415",
                            "rendered": "#!/bin/bash -ve\ntouch /home/ubuntu/worker.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/worker.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/worker.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/worker.log\n\n# ----------------- from here same with worker.sh\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\necho '[Wait] kubeadm join until kubeadm cluster have been created.' \u003e\u003e /home/ubuntu/worker.log\nfor i in {1..50}; do sudo kubeadm join --token=d7dd14.55fbb69d581e8917 --discovery-token-unsafe-skip-ca-verification --node-name=$(hostname -f) 10.43.0.40:6443 \u0026\u0026 break || sleep 15; done\n",
                            "template": "#!/bin/bash -ve\ntouch /home/ubuntu/worker.log\n\ncurl https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -\ntouch /etc/apt/sources.list.d/kubernetes.list\n\nsu -c \"echo 'deb http://apt.kubernetes.io/ kubernetes-xenial main' \u003e\u003e \\\n    /etc/apt/sources.list.d/kubernetes.list\"\n\n# Install and start SSM agent \ncurl \"https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/debian_amd64/amazon-ssm-agent.deb\" -o \"amazon-ssm-agent.deb\"\napt-get install -y ./amazon-ssm-agent.deb \u0026\u0026 systemctl start amazon-ssm-agent.service\nuseradd -m -d /home/ec2-user -s /bin/bash ec2-user\nuseradd -m -d /home/ssm-user -s /bin/bash ssm-user\necho \"ssm-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ssm-agent-users\necho \"ec2-user ALL=(ALL) NOPASSWD:ALL\" \u003e /etc/sudoers.d/ec2-user\n\n# Install kubelet kubeadm kubectl kubernetes-cni docker\napt-get update\napt-get install -y kubelet kubeadm kubectl kubernetes-cni\ncurl -sSL https://get.docker.com/ | sh\nsystemctl start docker\necho '[Finished] Installing kubelet kubeadm kubectl kubernetes-cni docker' \u003e\u003e /home/ubuntu/worker.log\n\nsystemctl stop docker\nmkdir /mnt/docker\nchmod 711 /mnt/docker\ncat \u003c\u003cEOF \u003e /etc/docker/daemon.json\n{\n    \"data-root\": \"/mnt/docker\",\n    \"log-driver\": \"json-file\",\n    \"log-opts\": {\n        \"max-size\": \"10m\",\n        \"max-file\": \"5\"\n    }\n}\nEOF\nsystemctl start docker\nsystemctl enable docker\necho '[Finished] docker configure' \u003e\u003e /home/ubuntu/worker.log\n\n# Point kubelet at big ephemeral drive\nmkdir /mnt/kubelet\necho 'KUBELET_EXTRA_ARGS=\"--root-dir=/mnt/kubelet --cloud-provider=aws\"' \u003e /etc/default/kubelet\necho '[Finished] kubelet configure' \u003e\u003e /home/ubuntu/worker.log\n\n# ----------------- from here same with worker.sh\n\n# Pass bridged IPv4 traffic to iptables chains (required by Flannel)\necho \"net.bridge.bridge-nf-call-iptables = 1\" \u003e /etc/sysctl.d/60-flannel.conf\nservice procps start\n\necho '[Wait] kubeadm join until kubeadm cluster have been created.' \u003e\u003e /home/ubuntu/worker.log\nfor i in {1..50}; do sudo kubeadm join --token=${k8stoken} --discovery-token-unsafe-skip-ca-verification --node-name=$(hostname -f) ${masterIP}:6443 \u0026\u0026 break || sleep 15; done\n",
                            "vars.%": "2",
                            "vars.k8stoken": "d7dd14.55fbb69d581e8917",
                            "vars.masterIP": "10.43.0.40"
                        },
                        "meta": {},
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": "provider.template"
                }
            },
            "depends_on": []
        }
    ]
}
